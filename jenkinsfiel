pipeline {
  environment { 
    namespace = "uat"
    project = "uat-blue"
    projecturl = "uat-blue.housediy.lan"
    Port = "8096"
    replicas= "1"
    zkhost= "zookeeper:2181"
    zkenv = "pro"
    image = "192.168.122.143/${namespace}/${project}:${BUILD_ID}"
    }
  agent {
    kubernetes {
      label 'mypod'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  namespace: kube-ops
  labels:
    name: jenkins-slave
spec:
  containers:
  - name: maven
    image: maven:3.3.9-jdk-8-alpine
    command:
    - cat
    tty: true
    volumeMounts:
    - name: maven-repository
      mountPath: /root/.m2
  - name: build
    image: 192.168.122.143/base-image/jnlp:v1
    command:
    - cat
    tty: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
    - name: kube-config
      mountPath: /root/.kube
    env:
    - name: KUBECONFIG
      value: "/root/.kube/config"
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
  - name: kube-config
    secret:
      secretName: kubectl-kube
  - name: maven-repository
    nfs:
      server: 192.168.122.145
      path: /home/maven
"""
    }
  }
  stages {
    stage('Run maven') {
      steps {
        container('build') {
          sh 'echo "start mvn"'
        }
        container('maven') {
          sh 'mvn -B clean install'
        }
      }
    }
	stage('build project') {
	  steps ('build') {
	    container('build') {
          withDockerRegistry(credentialsId: 'dcafcd50-e866-4e40-99a4-9fd6f5e94805', url: 'https://192.168.122.143') {
                     sh """
                     sed -i 's/AppPort/${Port}/g'  Dockerfile
                     docker build -t ${image} .
                     docker push ${image}
                     """
                     }
        }
	  }
	}
	stage('deploy status') {
	  steps ('check deploy') {
	    container('build') {
	    script {
		getdm = sh(returnStdout: true, script: "kubectl get deployment -n ${namespace}| grep ${project} | wc -l").trim()
                    if ("${getdm}" == "1") {
                         getimages = sh(returnStdout: true, script: "kubectl get deployment ${project} -n ${namespace} -o jsonpath={..image}").trim()
                         if ("$getimages" == "${image}"){
                             sh("kubectl delete deploy ${project} -n ${namespace}")
                             redeployFlag = '1'}else {
                                 sh("kubectl set image deployment/${project} ${project}=${image} -n ${namespace}")
                                 sh ("kubectl rollout status -n $namespace  deployment/${project}")
                                 sh("echo 请访问: http://`kubectl  get ingress -n ${namespace} ${project}  -o  jsonpath='{.spec.rules[].host}'`")
                                 redeployFlag = '0'
                            }
                    }
                    else {
                         redeployFlag = '2'
                        }
					if ("$redeployFlag" > '0'){
                   //替换变量def String commit_tag
				         sh """
                         sed -i 's/projectname/${project}/g'  deployment.yaml
                         sed -i 's/repnum/${replicas}/g'  deployment.yaml
                         sed -i 's/nspace/${namespace}/g'  deployment.yaml
                         sed -i 's/AppPort/${Port}/g'  deployment.yaml
                         sed -i 's/zkenv/${zkenv}/g'  deployment.yaml					 
                         sed -i 's/imageTag/${BUILD_ID}/g'  deployment.yaml
                         sed -i 's/url/${projecturl}/g'  deployment.yaml
						 """
                         //创建deployment
                         sh("kubectl --namespace=${namespace} apply -f deployment.yaml")
                         //更新状态更新更新状态状态状态
                         sh ("kubectl rollout status -n $namespace  deployment/${project}")
                         //获取url
                         sh("echo 请访问: http://`kubectl  get ingress -n ${namespace} ${project}  -o  jsonpath='{.spec.rules[].host}'`")
                        }
                    else {
                         echo '部署成功'
                    }
                 }
	  }
	}
  }
  stage('http status') {
    steps ('http status') {
      container('build') {
	  script {
	    sh("echo '192.168.1.226 ${projecturl}' >> /etc/hosts")
                     sh '''#!/bin/bash
                     for ((i=1; i<=30 ; ++i))
                         do
                         httpcode=`curl -I -m 10 -o /dev/null -s -w %{http_code} "${projecturl}/swagger-ui.html#/"`
                         if [ $httpcode -eq 200 -o $httpcode -eq  302 ] ; then
                             echo "第 $i 次尝试访问${projecturl}/swagger-ui.html#/，返回代码：$httpcode"
                             echo "部署成功."
                             exit 0
                         fi
                         echo "第 $i 次尝试访问${projecturl}/swagger-ui.html#/，返回代码：$httpcode"
                         sleep 2
                         done

                         if [ $httpcode  -ne 200 -o $httpcode  -ne 302 ]; then
                             echo "访问${projecturl}返回代码：$httpcode"
                             echo "部署失败："
                             echo "现在可以手动刷新部署页面，再等待一段时间。或查看日志分析部署失败的原因。"
                             exit 1
                         fi   
                         '''
	  }
	  }
	}
  }
}
}
